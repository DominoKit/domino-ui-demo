ContactsTopPanel<Contact> topPanel = new ContactsTopPanel<>();
SimplePaginationPlugin<Contact> simplePaginationPlugin = new SimplePaginationPlugin<>(10);
TableConfig<Contact> tableConfig = new TableConfig<>();
tableConfig
        .addColumn(ColumnConfig.<Contact>create("id", "#")
                .sortable()
                .styleCell(cellElement -> Style.of(cellElement).setProperty("vertical-align", "middle"))
                .textAlign("right")
                .asHeader()
                .setCellRenderer(cell -> new Text(cell.getTableRow().getRecord().getIndex() + 1 + ""))
                .setWidth("70px"))

        .addColumn(ColumnConfig.<Contact>create("status", "Status")
                .setWidth("80px")
                .textAlign("center")
                .setCellRenderer(cell -> {
                    if (cell.getTableRow().getRecord().isActive()) {
                        return Style.of(Icons.ALL.check_circle().asElement()).setColor(Color.GREEN_DARKEN_3.getHex()).asElement();
                    } else {
                        return Style.of(Icons.ALL.highlight_off().asElement()).setColor(Color.RED_DARKEN_3.getHex()).asElement();
                    }
                }))

        .addColumn(ColumnConfig.<Contact>create("firstName", "First name")
                .sortable()
                .setCellRenderer(cell -> new Text(cell.getTableRow().getRecord().getName()))
                .setWidth("200px"))

        .addColumn(ColumnConfig.<Contact>create("gender", "Gender")
                .setWidth("100px")
                .setCellRenderer(cell -> ContactUiUtils.getGenderElement(cell.getRecord()))
                .textAlign("center"))

        .addColumn(ColumnConfig.<Contact>create("eyeColor", "Eye color")
                .styleHeader(head -> Style.of(head).setWidth("100px"))
                .setCellRenderer(cell -> ContactUiUtils.getEyeColorElement(cell.getRecord()))
                .textAlign("center")
                .maxWidth("120px"))

        .addColumn(ColumnConfig.<Contact>create("balance", "Balance")
                .sortable()
                .setCellRenderer(cellInfo -> ContactUiUtils.getBalanceElement(cellInfo.getRecord()))
                .setWidth("200px"))

        .addColumn(ColumnConfig.<Contact>create("email", "Email")
                .setWidth("250px")
                .setCellRenderer(cell -> new Text(cell.getTableRow().getRecord().getEmail())))

        .addColumn(ColumnConfig.<Contact>create("phone", "Phone")
                .setWidth("200px")
                .setCellRenderer(cell -> new Text(cell.getTableRow().getRecord().getPhone())))

        .addColumn(ColumnConfig.<Contact>create("badges", "Badges")
                .setCellRenderer(cell -> {
                    if (cell.getTableRow().getRecord().getAge() < 35) {
                        return Badge.create("Young")
                                .setBackground(ColorScheme.GREEN.color()).asElement();
                    }
                    return new Text("");
                }))

        .addPlugin(simplePaginationPlugin)

        .addPlugin(new TopPanelPlugin<Contact>() {

            @Override
            public HTMLElement asElement() {
                return topPanel.asElement();
            }

            @Override
            public void handleEvent(TableEvent event) {
                if (TableDataUpdatedEvent.DATA_UPDATED.equals(event.getType())) {
                    topPanel.update((TableDataUpdatedEvent<Contact>) event);
                }
            }
        })

        .addPlugin(new HeaderBarPlugin<Contact>("Demo table", "this a sample table with all features")
                .addActionElement(dataTable -> {
                    IconButton selectInactiveButton = IconButton.create(Icons.ALL.highlight_off())
                            .linkify();

                    Tooltip.create(selectInactiveButton.asElement(), new Text("Select Inactive"));
                    Style.of(selectInactiveButton)
                            .setProperty("padding", "0px")
                            .setHeight("26px")
                            .setColor("black", true)
                            .css(Styles.pull_right, Styles.m_r_15);

                    selectInactiveButton.addClickListener(evt -> {
                        dataTable.getTableRows().forEach(tableRow -> {
                            if (!tableRow.getRecord().isActive()) {
                                tableRow.select();
                            } else {
                                tableRow.deselect();
                            }
                        });
                    });

                    return selectInactiveButton.asElement();
                })
                .addActionElement(dataTable -> {
                    IconButton selectInactiveButton = IconButton.create(Icons.ALL.check_circle())
                            .linkify();

                    Tooltip.create(selectInactiveButton.asElement(), new Text("Select Active"));
                    Style.of(selectInactiveButton)
                            .setProperty("padding", "0px")
                            .setHeight("26px")
                            .setColor("black", true)
                            .css(Styles.pull_right, Styles.m_r_15);

                    selectInactiveButton.addClickListener(evt -> {
                        dataTable.getTableRows().forEach(tableRow -> {
                            if (tableRow.getRecord().isActive()) {
                                tableRow.select();
                            } else {
                                tableRow.deselect();
                            }
                        });
                    });

                    return selectInactiveButton.asElement();
                })
                .addActionElement(new HeaderBarPlugin.SearchTableAction<Contact>()
                        .addSearchField(SelectOption.create("", "Name, Email"), true)
                        .addSearchField(SelectOption.create("name", "Name"))
                        .addSearchField(SelectOption.create("email", "Email"))
                )
        )

        .addPlugin(new RecordDetailsPlugin<>(cell -> new ContactDetails(cell).asElement()))

        .addPlugin(new SelectionPlugin<>(ColorScheme.BLUE))

        .addPlugin(new RowMarkerPlugin<>(cellInfo -> ContactUiUtils.getBalanceColor(cellInfo.getRecord())))

        .addPlugin(new SortPlugin<>());

LocalListDataStore<Contact> localListDataSource = new LocalListDataStore<Contact>()
        .setSearchFilter(new ContactSearchFilter())
        .setRecordsSorter(new ContactSorter())
        .setPagination(simplePaginationPlugin.getSimplePagination());

DataTable<Contact> table = new DataTable<>(tableConfig, localListDataSource);

element.appendChild(Card.create("ALL IN ONE", "Try all plugins and feature works together.")
        .setCollapsible()
        .appendContent(new TableStyleActions(dataTable))
        .appendContent(dataTable.asElement())
        .asElement());

List<Contact> contacts = ...
localListDataSource.setData(contacts);
table.load();
topPanel.update(contacts);